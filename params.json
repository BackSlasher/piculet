{"name":"Piculet","tagline":"Piculet is a tool to manage EC2 Security Group. It defines the state of EC2 Security Group using DSL, and updates EC2 Security Group according to DSL.","body":"## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n    gem 'piculet'\r\n\r\nAnd then execute:\r\n\r\n    $ bundle\r\n\r\nOr install it yourself as:\r\n\r\n    $ gem install piculet\r\n\r\n## Usage\r\n\r\n```sh\r\nexport AWS_ACCESS_KEY_ID='...'\r\nexport AWS_SECRET_ACCESS_KEY='...'\r\nexport AWS_REGION='ap-northeast-1'\r\n#export AWS_OWNER_ID='123456789012'\r\n# Note: If you do not set the OWNER_ID,\r\n#       Piculet get the OWNER_ID from GetUser(IAM) or CreateSecurityGroup(EC2)\r\npiculet -e -o Groupfile  # export EC2 SecurityGroup\r\nvi Groupfile\r\npiculet -a --dry-run\r\npiculet -a               # apply `Groupfile` to EC2 SecurityGroup\r\n```\r\n\r\n## Help\r\n```\r\nUsage: piculet [options]\r\n    -p, --profile PROFILE_NAME\r\n        --credentials-path PATH\r\n    -k, --access-key ACCESS_KEY\r\n    -s, --secret-key SECRET_KEY\r\n    -r, --region REGION\r\n    -a, --apply\r\n    -f, --file FILE\r\n    -n, --names SG_LIST\r\n        --ec2s VPC_IDS\r\n        --dry-run\r\n    -e, --export\r\n    -o, --output FILE\r\n        --split\r\n        --no-color\r\n        --debug\r\n```\r\n\r\n## Groupfile example\r\n\r\n```ruby\r\nrequire 'other/groupfile'\r\n\r\nec2 do\r\n  security_group \"default\" do\r\n    description \"default group for EC2 Classic\"\r\n\r\n    tags(\r\n      \"key1\" => \"value1\",\r\n      \"key2\" => \"value2\"\r\n    )\r\n\r\n    ingress do\r\n      permission :tcp, 0..65535 do\r\n        groups(\r\n          \"default\"\r\n        )\r\n      end\r\n      permission :udp, 0..65535 do\r\n        groups(\r\n          \"default\"\r\n        )\r\n      end\r\n      permission :icmp, -1..-1 do\r\n        groups(\r\n          \"default\"\r\n        )\r\n      end\r\n      permission :tcp, 22..22 do\r\n        ip_ranges(\r\n          \"0.0.0.0/0\"\r\n        )\r\n      end\r\n      permission :udp, 60000..61000 do\r\n        ip_ranges(\r\n          \"0.0.0.0/0\",\r\n        )\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\nec2 \"vpc-XXXXXXXX\" do\r\n  security_group \"default\" do\r\n    description \"default VPC security group\"\r\n\r\n    tags(\r\n      \"key1\" => \"value1\",\r\n      \"key2\" => \"value2\"\r\n    )\r\n\r\n    ingress do\r\n      permission :tcp, 22..22 do\r\n        ip_ranges(\r\n          \"0.0.0.0/0\",\r\n        )\r\n      end\r\n      permission :tcp, 80..80 do\r\n        ip_ranges(\r\n          \"0.0.0.0/0\"\r\n        )\r\n      end\r\n      permission :udp, 60000..61000 do\r\n        ip_ranges(\r\n          \"0.0.0.0/0\"\r\n        )\r\n      end\r\n      # ESP (IP Protocol number: 50)\r\n      permission :\"50\" do\r\n        ip_ranges(\r\n          \"0.0.0.0/0\"\r\n        )\r\n      end\r\n      permission :any do\r\n        groups(\r\n          \"any_other_group\",\r\n          \"default\"\r\n        )\r\n      end\r\n    end\r\n\r\n    egress do\r\n      permission :any do\r\n        ip_ranges(\r\n          \"0.0.0.0/0\"\r\n        )\r\n      end\r\n    end\r\n  end\r\n\r\n  security_group \"any_other_group\" do\r\n    description \"any_other_group\"\r\n\r\n    tags(\r\n      \"key1\" => \"value1\",\r\n      \"key2\" => \"value2\"\r\n    )\r\n\r\n    egress do\r\n      permission :any do\r\n        ip_ranges(\r\n          \"0.0.0.0/0\"\r\n        )\r\n      end\r\n    end\r\n  end\r\nend\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}