#!/usr/bin/env ruby
$: << File.expand_path("#{File.dirname __FILE__}/../lib")
require 'rubygems'
require 'piculet'
require 'optparse'

mode = nil
file = 'Groupfile'
output_file = '-'
split = false

options = {
  :dry_run     => false,
  :color       => true,
  :debug       => false,
}

ARGV.options do |opt|
  begin
    access_key = nil
    secret_key = nil
    region = nil

    opt.on('-k', '--access-key ACCESS_KEY') {|v| access_key                   = v       }
    opt.on('-s', '--secret-key SECRET_KEY') {|v| secret_key                   = v       }
    opt.on('-r', '--region REGION')         {|v| region                       = v       }
    opt.on('-a', '--apply')                 {|v| mode                         = :apply  }
    opt.on('-f', '--file FILE')             {|v| file                         = v       }
    opt.on('-n', '--names SG_LIST', Array)  {|v| options[:sg_names]           = v       }
    opt.on('',   '--ec2s VPC_IDS', Array)   {|v| options[:ec2s]               = v       }
    opt.on('',   '--dry-run')               {|v| options[:dry_run]            = true    }
    opt.on('-e', '--export')                {|v| mode                         = :export }
    opt.on('-o', '--output FILE')           {|v| output_file                  = v       }
    opt.on('',   '--split')                 {|v| split                        = true    }
    opt.on(''  , '--no-color')              {    options[:color]              = false   }
    opt.on(''  , '--debug')                 {    options[:debug]              = true    }
    opt.parse!

    if access_key and secret_key
      aws_opts = {
        :access_key_id     => access_key,
        :secret_access_key => secret_key,
      }
      aws_opts[:region] = region if region
      AWS.config(aws_opts)
    elsif (access_key and !secret_key) or (!access_key and secret_key) or mode.nil?
      puts opt.help
      exit 1
    elsif region
      AWS.config(:region => region)
    end
  rescue => e
    $stderr.puts("[ERROR] #{e.message}")
    exit 1
  end
end

String.colorize = options[:color]

if options[:debug]
  AWS.config({
    :http_wire_trace => true,
    :logger => Piculet::Logger.instance,
  })
end

begin
  logger = Piculet::Logger.instance
  logger.set_debug(options[:debug])
  client = Piculet::Client.new(options)

  case mode
  when :export
    if split
      logger.info('Export SecurityGroup')

      output_file = 'Groupfile' if output_file == '-'
      requires = []

      client.export(options) do |exported, converter|
        exported.each do |vpc, security_groups|
          group_file = File.join(File.dirname(output_file), "#{vpc || :classic}.group")
          requires << group_file

          logger.info("  write `#{group_file}`")

          open(group_file, 'wb') do |f|
            f.puts converter.call(vpc => security_groups)
          end
        end
      end

      logger.info("  write `#{output_file}`")

      open(output_file, 'wb') do |f|
        requires.each do |group_file|
          f.puts "require '#{File.basename group_file}'"
        end
      end
    else
      if output_file == '-'
        logger.info('# Export SecurityGroup')
        puts client.export(options)
      else
        logger.info("Export SecurityGroup to `#{output_file}`")
        open(output_file, 'wb') {|f| f.puts client.export(options) }
      end
    end
  when :apply
    unless File.exist?(file)
      raise "No Groupfile found (looking for: #{file})"
    end

    msg = "Apply `#{file}` to SecurityGroup"
    msg << ' (dry-run)' if options[:dry_run]
    logger.info(msg)

    updated = client.apply(file)

    logger.info('No change'.intense_blue) unless updated
  else
    raise 'must not happen'
  end
rescue => e
  if options[:debug]
    raise e
  else
    $stderr.puts("[ERROR] #{e.message}".red)
    exit 1
  end
end
